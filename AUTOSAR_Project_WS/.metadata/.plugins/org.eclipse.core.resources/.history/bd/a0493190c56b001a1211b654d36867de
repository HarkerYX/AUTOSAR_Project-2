 /******************************************************************************
 *
 * Module: Port
 *
 * File Name: Port.h
 *
 * Description: Header file for Port Module.
 *
 * Author: Mohamed Tarek
 ******************************************************************************/

#ifndef PORT_H
#define PORT_H
/* Id for the company in the AUTOSAR
 * for example Mohamed Tarek's ID = 1000 :) */
#define PORT_VENDOR_ID    (1000U)

/* Port Module Id */
#define PORT_MODULE_ID    (124U)

/* Port Instance Id */
#define PORT_INSTANCE_ID  (0U)


/*
 * Module Version 1.0.0
 */
#define PORT_SW_MAJOR_VERSION           (1U)
#define PORT_SW_MINOR_VERSION           (0U)
#define PORT_SW_PATCH_VERSION           (0U)

/*
 * AUTOSAR Version 4.0.3
 */
#define PORT_AR_RELEASE_MAJOR_VERSION   (4U)
#define PORT_AR_RELEASE_MINOR_VERSION   (0U)
#define PORT_AR_RELEASE_PATCH_VERSION   (3U)

/*
 * Macros for Port Status
 */
#define PORT_INITIALIZED                (1U)
#define PORT_NOT_INITIALIZED            (0U)
/* Macros for number of ports*/
#define NUMBER_OF_PINS 					(32U)
/* Standard AUTOSAR types */
#include "Std_Types.h"

/* AUTOSAR checking between Std Types and Port Modules */
#if ((STD_TYPES_AR_RELEASE_MAJOR_VERSION != PORT_AR_RELEASE_MAJOR_VERSION)\
 ||  (STD_TYPES_AR_RELEASE_MINOR_VERSION != PORT_AR_RELEASE_MINOR_VERSION)\
 ||  (STD_TYPES_AR_RELEASE_PATCH_VERSION != PORT_AR_RELEASE_PATCH_VERSION))
  #error "The AR version of Std_Types.h does not match the expected version"
#endif
/* PORT Pre-Compile Configuration Header file */
#include "Port_Cfg.h"

/* AUTOSAR Version checking between PORT_Cfg.h and PORT.h files */
#if ((PORT_CFG_AR_RELEASE_MAJOR_VERSION != PORT_AR_RELEASE_MAJOR_VERSION)\
 ||  (PORT_CFG_AR_RELEASE_MINOR_VERSION != PORT_AR_RELEASE_MINOR_VERSION)\
 ||  (PORT_CFG_AR_RELEASE_PATCH_VERSION != PORT_AR_RELEASE_PATCH_VERSION))
  #error "The AR version of PORT_Cfg.h does not match the expected version"
#endif

/* Software Version checking between PORT_Cfg.h and PORT.h files */
#if ((PORT_CFG_SW_MAJOR_VERSION != PORT_SW_MAJOR_VERSION)\
 ||  (PORT_CFG_SW_MINOR_VERSION != PORT_SW_MINOR_VERSION)\
 ||  (PORT_CFG_SW_PATCH_VERSION != PORT_SW_PATCH_VERSION))
  #error "The SW version of PORT_Cfg.h does not match the expected version"
#endif

/* Non AUTOSAR files */
#include "Common_Macros.h"
/******************************************************************************
 *                       Type ranges		                                  *
 ******************************************************************************/
/* Port_PinDirectionChangeableType range */
#define PORT_DIRECTION_CAN_BE_CHANGED 			(STD_ON)
#define PORT_DIRECTION_CAN_NOT_BE_CHANGED 		(STD_OFF)
/* Port_PinModeChangeableType range */
#define PORT_MODE_CAN_BE_CHANGED 				(STD_ON)
#define PORT_MODE_CAN_NOT_BE_CHANGED	 		(STD_OFF)
/* Port_InitlevelType range */
#define PORT_INIT_LEVEL_OFF				 		(0U)
#define PORT_INIT_LEVEL_ON				 		(1U)

/* Port_PinDirectionType range */
#define PORT_PIN_IN				 				(0U)
#define PORT_PIN_OUT 							(1U)
/* Port_PinModeType range */
#define PORT_PIN_MODE_ADC						(0U)
#define PORT_PIN_MODE_CAN						(1U)
#define PORT_PIN_MODE_DIO						(2U)
#define PORT_PIN_MODE_DIO_GPT					(3U)
#define PORT_PIN_MODE_DIO_WDG					(4U)
#define PORT_PIN_MODE_FLEXRAY					(5U)
#define PORT_PIN_MODE_ICU						(6U)
#define PORT_PIN_MODE_LIN						(7U)
#define PORT_PIN_MODE_MEM						(8U)
#define PORT_PIN_MODE_PWM						(9U)
#define PORT_PIN_MODE_SPI						(10U)

/******************************************************************************
 *                      API Service Id Macros                                 *
 ******************************************************************************/
/* Service ID for PORT Init Channel */
#define PORT_INIT_SID                   (uint8)0x00

/* Service ID for PORT set pin direction */
#define PORT_SET_PIN_DIRECTION_SID		(uint8)0x01

/* Service ID for PORT REFRESH DIRECTION */
#define PORT_REFRESH_PORT_DIRECTION_SID	(uint8)0x02

/* Service ID for PORT GetVersionInfo */
#define PORT_GET_VERSION_INFO_SID       (uint8)0x03

/* Service ID for PORT SetPinMode */
#define PORT_SET_PIN_MODE_SID			(uint8)0x04


/*******************************************************************************
 *                      DET Error Codes                                        *
 *******************************************************************************/

/*Det code to report Invalid Port Pin ID */
#define PORT_E_PARAM_PIN				(uint8)0x0A

/*Det code to report Port Pin not configured as changeable */
#define PORT_E_DIRECTION_UNCHANGEABLE	(uint8)0x0B

/* Port_Init API service called with NULL pointer parameter */
#define PORT_E_PARAM_CONFIG				(uint8)0x0C

/* Det code to report Port_SetPinMode service called when mode is unchangeable */
#define PORT_E_PARAM_INVALID_MODE		(uint8)0x0D

/* Det code to report Port_SetPinMode service called when mode is unchangeable */
#define PORT_E_MODE_UNCHANGEABLE		(uint8)0x0E

/* Det code to report service called without module initialization */
#define PORT_E_UNINIT					(uint8)0x0F

/* Det code to report APIs called with a Null Pointer */
#define PORT_E_PARAM_POINTER			(uint8)0x10

/*******************************************************************************
 *                              Module Data Types                              *
 *******************************************************************************/
/* Type definition for Port_PortType used by the Port APIs */
typedef uint8 Port_PinType;
/* Type definition for Dio_ChannelType used by the DIO APIs */
typedef uint8 Port_ChannelType;
/* Type definition for Port_PinDirectionType used by the Port APIs */
typedef uint8 Port_PinDirectionType;
/* Type definition for Port_PinDirectionCCChangableType used by the Port APIs */
typedef uint8 Port_PinDirectionChangeableType;
/* Type definition for Port_PinModeType used by the Port APIs */
typedef uint8 Port_PinModeType;
/* Type definition for Port_PinModeChangableType used by the Port APIs */
typedef uint8 Port_PinModeChangeableType;
/* Type definition for Port_PinInitLevelType used by the Port APIs */
typedef uint8 Port_PinInitLevelType;

/* Data Structure required for initializing the Port Driver */
typedef struct
{
	Port_PinType pin;
	Port_ChannelType Ch_Num;
	Port_PinDirectionType direction;
	Port_PinDirectionChangeableType directionCanChange;
	Port_PinModeType mode;
	Port_PinModeChangeableType modeCanChange;
	Port_PinInitLevelType initlevel;
}Port_Config;

typedef struct
{
	Port_Config Channels[NUMBER_OF_PINS];
} Port_ConfigType;






/*******************************************************************************
 *                      Function Prototypes                                    *
 *******************************************************************************/


/* Function for Port Initialization API */
void Port_Init(const Port_ConfigType * ConfigPtr);

/* Function for Port SetPinDirection API */
#if (PORT_SET_PIN_DIRECTION_API == STD_ON)
void Port_SetPinDirection( Port_PinType Pin, Port_PinDirectionType Direction );
#endif

/* Function shall refresh the direction of all configured ports to the configured direction*/
void Port_RefreshPortDirection( void );

/* function shall return the version information of this module */
#if (PORT_VERSION_INFO_API == STD_ON)
void Port_GetVersionInfo( Std_VersionInfoType* versioninfo );
#endif

/* The function shall set the port pin mode of the referenced pin during runtime */
#if (PORT_SET_PIN_MODE_API == STD_ON)
void Port_SetPinMode( Port_PinType Pin, Port_PinModeType Mode );
#endif
/*******************************************************************************
 *                       External Variables                                    *
 *******************************************************************************/

/* Extern PB structures to be used by Dio and other modules */
extern const Port_ConfigType Port_Configuration;

#endif /* PORT_H */
