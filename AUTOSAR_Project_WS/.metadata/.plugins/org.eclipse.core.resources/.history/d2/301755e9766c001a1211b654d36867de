 /******************************************************************************
 *
 * Module: Port
 *
 * File Name: Port.c
 *
 * Description: Source file for Port Module.
 *
 * Author: Mohamed Tarek
 ******************************************************************************/
#include "Port.h"
#include "Port_Regs.h"

#if (PORT_DEV_ERROR_DETECT == STD_ON)

#include "Det.h"
/* AUTOSAR Version checking between Det and Port Modules */
#if ((DET_AR_MAJOR_VERSION != PORT_AR_RELEASE_MAJOR_VERSION)\
 || (DET_AR_MINOR_VERSION != PORT_AR_RELEASE_MINOR_VERSION)\
 || (DET_AR_PATCH_VERSION != PORT_AR_RELEASE_PATCH_VERSION))
  #error "The AR version of Det.h does not match the expected version"
#endif

#endif

STATIC Port_Config * Port_PortChannels = NULL_PTR;
STATIC uint8 Port_Status = PORT_NOT_INITIALIZED;
/******************************
 *
 *
 * Service name:Port_Init
 * Syntax:void Port_Init( const Port_ConfigType* ConfigPtr )
 * Service ID[hex]:0x00
 * Sync/Async:Synchronous
 * Reentrancy:Non Reentrant
 * Parameters (in):ConfigPtr Pointer to configuration set.
 * Parameters (inout):None
 * Parameters (out):None
 * Return value:None
 * Description:Initializes the Port Driver module.
 *
 */
void Port_Init(const Port_ConfigType * ConfigPtr)
{
#if (PORT_DEV_ERROR_DETECT == STD_ON)
	/* check if the input configuration pointer is not a NULL_PTR */
	if (NULL_PTR == ConfigPtr)
	{
		Det_ReportError(PORT_MODULE_ID, PORT_INSTANCE_ID, PORT_INIT_SID,
		     PORT_E_PARAM_CONFIG);
	}
	else
#endif
	{
		/*
		 * Set the module state to initialized and point to the PB configuration structure using a global pointer.
		 * This global pointer is global to be used by other functions to read the PB configuration structures
		 */
		Port_Status       = PORT_INITIALIZED;
		Port_PortChannels = ConfigPtr->Channels; /* address of the first Channels structure --> Channels[0] */
	}
	for(uint8 pinNumber=0;pinNumber<NUMBER_OF_PINS;pinNumber++)
	{
		uint8 * DDR_Ptr = NULL_PTR;
		uint8 * PORT_Ptr= NULL_PTR;
		switch(Port_PortChannels[pinNumber].pin)
			{
				case  0:
					DDR_Ptr = &DDRA_REG;
					PORT_Ptr= &PORTA_REG;
						 break;
				case  1:
					DDR_Ptr = &DDRB_REG;
					PORT_Ptr= &PORTB_REG;
						 break;
				case  2:
					DDR_Ptr = &DDRC_REG;
					PORT_Ptr= &PORTC_REG;
						 break;
				case  3:
					DDR_Ptr = &DDRD_REG;
					PORT_Ptr= &PORTD_REG;
						 break;
			}

					/*set initial direction*/
					if(Port_PortChannels[pinNumber].direction == PORT_PIN_OUT)
					{
						SET_BIT(*DDR_Ptr,Port_PortChannels[pinNumber].Ch_Num); // set the corresponding bit in the DDR register to configure it as output pin
					}
					else if(Port_PortChannels[pinNumber].direction == PORT_PIN_IN)
					{
						CLEAR_BIT(*DDR_Ptr,Port_PortChannels[pinNumber].Ch_Num); // clear the corresponding bit in the DDR register to configure it as input pin
					}
					/* set initial level or pullup resistance*/
					if(Port_PortChannels[pinNumber].initlevel == PORT_INIT_LEVEL_ON)
					{
						SET_BIT(*PORT_Ptr,Port_PortChannels[pinNumber].Ch_Num); // set the corresponding bit in the DDR register to configure it as output pin
					}
					else if(Port_PortChannels[pinNumber].initlevel == PORT_INIT_LEVEL_OFF)
					{
						CLEAR_BIT(*PORT_Ptr,Port_PortChannels[pinNumber].Ch_Num); // clear the corresponding bit in the DDR register to configure it as input pin
					}
	}
}
/*
 *
 *Service name:Port_SetPinDirection
 *Syntax:void Port_SetPinDirection( Port_PinType Pin, Port_PinDirectionType Direction )
 *Service ID[hex]:0x01
 *Sync/Async:Synchronous
 *Reentrancy:Reentrant
 *Parameters (in): Pin 	   	 Port Pin ID number
 *				 Direction	 Port Pin Direction
 *
 *Parameters (inout):None
 *Parameters (out):None
 *Return value:None
 *Description:Sets the port pin direction
 *
 */
#if PORT_SET_PIN_DIRECTION_API == STD_ON
void Port_SetDirection( Port_PinType Pin, Port_PinDirectionType Direction )
{
	uint8 * DDR_Ptr = NULL_PTR;
	boolean error = FALSE;
#if (PORT_DEV_ERROR_DETECT == STD_ON)
	/* Check if the Driver is initialized before using this function */
	if (PORT_NOT_INITIALIZED == Port_Status)
	{
		Det_ReportError(PORT_MODULE_ID, PORT_INSTANCE_ID,
				PORT_SET_PIN_DIRECTION_SID, PORT_E_UNINIT);
		error = TRUE;
	}
	else
	{
		/* No Action Required */
	}
	/* Check if the direction can be changed in this pin */
	if(Port_PortChannels[Pin].directionCanChange==PORT_DIRECTION_CAN_BE_CHANGED)
	{
		Det_ReportError(PORT_MODULE_ID, PORT_INSTANCE_ID,
						PORT_SET_PIN_DIRECTION_SID,PORT_E_DIRECTION_UNCHANGEABLE);
				error = TRUE;
	}
#endif

	if(FALSE==error)
	{
		/* point to the required DDR Register */
			switch(Port_PortChannels[Pin].pin)
			{
				case  0:
					DDR_Ptr = &DDRA_REG;
						 break;
				case  1:
					DDR_Ptr = &DDRB_REG;
						 break;
				case  2:
					DDR_Ptr = &DDRC_REG;
						 break;
				case  3:
					DDR_Ptr = &DDRD_REG;
						 break;
			}
			if(Direction == PORT_PIN_OUT)
			{
				SET_BIT(*DDR_Ptr,(Port_PortChannels[Pin].pin)%8); // set the corresponding bit in the DDR register to configure it as output pin
			}
			else if(Direction == PORT_PIN_IN)
			{
				CLEAR_BIT(*DDR_Ptr,(Port_PortChannels[Pin].pin)%8); // clear the corresponding bit in the DDR register to configure it as input pin
			}
	}else
	{

	}

}
#endif
/*
 *
 *Service name:Port_RefreshPortDirection
 *Syntax:void Port_RefreshPortDirection( void )
 *Service ID[hex]:0x02
 *Sync/Async:Synchronous
 *Reentrancy:Non Reentrant
 *Parameters (in):None
 *Parameters (inout):None
 *Parameters (out):None
 *Return value:None
 *Description:Refreshes port direction.
 *
 */
void Port_RefreshPortDirection( void )
{

}

/*
 *
 *Service name:Port_GetVersionInfo
 *Syntax:void Port_GetVersionInfo( Std_VersionInfoType* versioninfo )
 *Service ID[hex]:0x03
 *Sync/Async:Synchronous
 *Reentrancy:Non Reentrant
 *Parameters (in):None
 *Parameters (inout):None
 *Parameters (out):versioninfo	Pointer to where to store the version information of this module.
 *Return value:None
 *Description:Returns the version information of this module.
 *
 */
#if (PORT_VERSION_INFO_API == STD_ON)
void Port_GetVersionInfo( Std_VersionInfoType* versioninfo )
{
#if (PORT_DEV_ERROR_DETECT == STD_ON)
	/* Check if input pointer is not Null pointer */
	if(NULL_PTR == versioninfo)
	{
		/* Report to DET  */
		Det_ReportError(PORT_MODULE_ID, PORT_INSTANCE_ID,
				PORT_GET_VERSION_INFO_SID, PORT_E_PARAM_POINTER);
	}
	else
#endif /* (PORT_DEV_ERROR_DETECT == STD_ON) */
	{
		/* Copy the vendor Id */
		versioninfo->vendorID = (uint16)PORT_VENDOR_ID;
		/* Copy the module Id */
		versioninfo->moduleID = (uint16)PORT_MODULE_ID;
		/* Copy Software Major Version */
		versioninfo->sw_major_version = (uint8)PORT_SW_MAJOR_VERSION;
		/* Copy Software Minor Version */
		versioninfo->sw_minor_version = (uint8)PORT_SW_MINOR_VERSION;
		/* Copy Software Patch Version */
		versioninfo->sw_patch_version = (uint8)PORT_SW_PATCH_VERSION;
	}

}
#endif
/*
 *
 *Service name:Port_SetPinMode
 *Syntax:void Port_SetPinMode( Port_PinType Pin, Port_PinModeType Mode )
 *Service ID[hex]:0x04
 *Sync/Async:Synchronous
 *Reentrancy:Reentrant
 *Parameters (in):	Pin			Port Pin ID number
 *					Mode		New Port Pin mode to be set on port pin.
 *Parameters (inout):None
 *Parameters (out):None
 *Return value:None
 *Description:Sets the port pin mode.
 */
#if (PORT_SET_PIN_MODE_API == STD_ON)
void Port_SetPinMode( Port_PinType Pin, Port_PinModeType Mode )
{
	uint8 * DDR_Ptr = NULL_PTR;
	boolean error = FALSE;
#if (PORT_DEV_ERROR_DETECT == STD_ON)
	/* Check if the Driver is initialized before using this function */
	if (PORT_NOT_INITIALIZED == Port_Status)
	{
		Det_ReportError(PORT_MODULE_ID, PORT_INSTANCE_ID,
				PORT_SET_PIN_DIRECTION_SID, PORT_E_UNINIT);
		error = TRUE;
	}
	else
	{
		/* No Action Required */
	}
	/* Check if the mode can be changed in this pin */
	if(Port_PortChannels[Pin].modeCanChange==PORT_MODE_CAN_BE_CHANGED)
	{
		Det_ReportError(PORT_MODULE_ID, PORT_INSTANCE_ID,
						PORT_SET_PIN_DIRECTION_SID,PORT_E_MODE_UNCHANGEABLE);
				error = TRUE;
	}
	else
	{

	}
	switch(Port_PortChannels[Pin].mode)
	{
	case 0:
		break;
	case 1:
			break;
	case 2:
			break;
	case 3:
			break;
	case 4:
			break;
	case 5:
			break;
	case 6:
			break;
	case 7:
			break;
	case 8:
			break;
	case 9:
			break;
	case 10:
			break;
	default:
		Det_ReportError(PORT_MODULE_ID, PORT_INSTANCE_ID,
						PORT_SET_PIN_DIRECTION_SID,PORT_E_PARAM_INVALID_MODE);
						error = TRUE;
	}
#endif

}
#endif
